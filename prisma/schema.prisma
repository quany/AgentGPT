generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["ReferentialIntegrity"]
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           String?
  subscriptionId String?   
  customerId     String?   

  accounts Account[]
  sessions Session[]
  Agent    Agent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id     String @id @default(cuid())
  userId String
  name   String
  goal   String

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  AgentTask AgentTask[]
}

model AgentTask {
  id      String @id @default(cuid())
  agentId String
  task    String
  result  String

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
}